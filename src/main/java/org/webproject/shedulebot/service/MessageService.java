package org.webproject.shedulebot.service;

import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.DeleteMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.webproject.shedulebot.dto.Task;
import org.webproject.shedulebot.util.CallbackCommands;
import org.webproject.shedulebot.util.CustomDateTimeFormatter;

import java.time.LocalDateTime;
import java.time.format.DateTimeParseException;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

import static org.webproject.shedulebot.util.CallbackCommands.*;

public class MessageService {
    private enum UpdateState {
        NONE, WAITING_ID, WAITING_DATA, WAITING_DELETE_ID,
        WAITING_TASK_DATE, WAITING_DATE_DESCRIPTION
    }

    private final Map<Long, UpdateState> userStates = new ConcurrentHashMap<>();
    private final Map<Long, Long> taskIdToUpdate = new ConcurrentHashMap<>();
    private final TelegramLongPollingBot bot;
    private final TaskService taskService;
    private final CustomDateTimeFormatter customDateTimeFormatter;
    private final Map<Long, Integer> lastMessageIds = new ConcurrentHashMap<>();
    private final Map<Long,LocalDateTime> tempTaskDates = new ConcurrentHashMap<>();
    
    public MessageService(TelegramLongPollingBot bot) {
        this.bot = bot;
        this.taskService = new TaskService();
        this.customDateTimeFormatter = new CustomDateTimeFormatter();
    }

    public void handleCommand(long chatId, String text) {
        try {
            UpdateState currentState = userStates.getOrDefault(chatId, UpdateState.NONE);

            switch (currentState) {
                case WAITING_ID -> handleTaskIdInput(chatId, text);
                case WAITING_DATA -> handleTaskUpdate(chatId, text);
                case WAITING_DELETE_ID -> handleTaskDelete(chatId, text);
                case WAITING_DATE_DESCRIPTION -> handleTaskDescriptionInput(chatId,text);
                case WAITING_TASK_DATE -> handleTaskDateInput(chatId,text);
                case NONE -> processCommand(chatId, text);
            }
        } catch (Exception e) {
            sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    private void processCommand(long chatId, String text) {
        if ("/start".equalsIgnoreCase(text) || "/menu".equalsIgnoreCase(text)) {
            lastMessageIds.remove(chatId);
            mainMenu(chatId);
        } else if ("/alltask".equalsIgnoreCase(text)) {
            sendAllTasks(chatId);
        } else if ("/help".equalsIgnoreCase(text)) {
            sendHelp(chatId);
        } else if (text.startsWith("/updatetask")) {
            startUpdateTask(chatId);
        } else if (text.startsWith("/deletetask")) {
            startDeleteTask(chatId);
        }else if (text.equals("/menu")){
            mainMenu(chatId);
        } else {
            sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π /help",MENU_MAIN);
        }
    }
    public void mainMenu(long chatId) {
        try {
            if (lastMessageIds.containsKey(chatId)) {
                deleteMessage(chatId, lastMessageIds.get(chatId));
            }

            SendMessage message = new SendMessage();
            message.setChatId(String.valueOf(chatId));
            message.setText("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");

            InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

            List<InlineKeyboardButton> row1 = new ArrayList<>();

            InlineKeyboardButton addTaskBtn = new InlineKeyboardButton();
            addTaskBtn.setText("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É");
            addTaskBtn.setCallbackData(CallbackCommands.MENU_ADD_TASK);
            row1.add(addTaskBtn);

            InlineKeyboardButton viewTasksBtn = new InlineKeyboardButton();
            viewTasksBtn.setText("üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á");
            viewTasksBtn.setCallbackData(CallbackCommands.MENU_VIEW_TASKS);
            row1.add(viewTasksBtn);

            List<InlineKeyboardButton> row2 = new ArrayList<>();

            InlineKeyboardButton updateTaskBtn = new InlineKeyboardButton();
            updateTaskBtn.setText("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É");
            updateTaskBtn.setCallbackData(CallbackCommands.MENU_UPDATE_TASK);
            row2.add(updateTaskBtn);

            InlineKeyboardButton deleteTaskBtn = new InlineKeyboardButton();
            deleteTaskBtn.setText("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É");
            deleteTaskBtn.setCallbackData(CallbackCommands.MENU_DELETE_TASK);
            row2.add(deleteTaskBtn);

            List<InlineKeyboardButton> row3 = new ArrayList<>();

            InlineKeyboardButton helpBtn = new InlineKeyboardButton();
            helpBtn.setText("‚ùì –ü–æ–º–æ—â—å");
            helpBtn.setCallbackData(CallbackCommands.MENU_HELP);
            row3.add(helpBtn);

            keyboard.add(row1);
            keyboard.add(row2);
            keyboard.add(row3);
            markup.setKeyboard(keyboard);
            message.setReplyMarkup(markup);

            Message sentMessage = bot.execute(message);
            lastMessageIds.put(chatId, sentMessage.getMessageId());

        } catch (Exception e) {
            e.printStackTrace();
            sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é");
        }
    }
    public void sendAllTasks(long chatId) {
        List<Task> tasks = taskService.getUserTasks(chatId);
        if (tasks.isEmpty()) {
            sendMessage(chatId, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.", MENU_MAIN);
            return;
        }

        StringBuilder sb = new StringBuilder("–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n");
        tasks.forEach(task -> sb.append(task.toString()).append("\n\n"));
        sendMessage(chatId, sb.toString(), CallbackCommands.MENU_MAIN);
    }

    public void startUpdateTask(long chatId) {
        List<Task> tasks = taskService.getUserTasks(chatId);
        if (tasks.isEmpty()) {
            sendMessage(chatId, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.",MENU_MAIN);
            return;
        }

        sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n" + getAllTasksAsString(chatId), CallbackCommands.MENU_MAIN);
        userStates.put(chatId, UpdateState.WAITING_ID);
    }

    private void handleTaskIdInput(long chatId, String text) {
        try {
            long taskId = Long.parseLong(text);
            Optional<Task> task = taskService.findTaskById(chatId, taskId);

            if (task.isPresent()) {
                taskIdToUpdate.put(chatId, taskId);
                sendMessage(chatId, """
                        –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
                        –¥–∞—Ç–∞ –≤—Ä–µ–º—è –æ–ø–∏—Å–∞–Ω–∏–µ
                        –ü—Ä–∏–º–µ—Ä: 31.12.2025 23:59 –ù–æ–≤—ã–π –ì–æ–¥""",BACK_UPDATE);
                userStates.put(chatId, UpdateState.WAITING_DATA);
            } else {
                sendMessage(chatId, "–ó–∞–¥–∞—á–∞ —Å ID " + taskId + " –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", BACK_UPDATE);
                userStates.put(chatId, UpdateState.NONE);
            }
        } catch (NumberFormatException e) {
            sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.", CallbackCommands.MENU_MAIN);
        }
    }

    private void handleTaskUpdate(long chatId, String text) {
        try {
            long taskId = taskIdToUpdate.get(chatId);
            String[] parts = text.split("\\s+", 3);

            if (parts.length < 3) {
                sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ: –¥–∞—Ç–∞ –≤—Ä–µ–º—è –æ–ø–∏—Å–∞–Ω–∏–µ\n–ü—Ä–∏–º–µ—Ä: 31.12.2025 23:59 –ù–æ–≤—ã–π –ì–æ–¥",BACK_UPDATE);
                return;
            }

            LocalDateTime newDateTime = customDateTimeFormatter.parse(parts[0] + " " + parts[1]);
            String description = parts[2];

            boolean updated = taskService.updateTask(chatId, taskId, newDateTime, description);

            if (updated) {
                Optional<Task> updatedTask = taskService.findTaskById(chatId, taskId);
                String taskInfo = updatedTask.map(Task::toString).orElse("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
                sendMessage(chatId, "–ó–∞–¥–∞—á–∞ ID " + taskId + " —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n" + taskInfo, CallbackCommands.MENU_MAIN);
            } else {
                sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É —Å ID " + taskId, BACK_UPDATE);
            }
        } catch (DateTimeParseException e) {
            sendMessage(chatId, "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:MM", BACK_UPDATE);
        } catch (Exception e) {
            sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: " + e.getMessage(), BACK_UPDATE);
        } finally {
            userStates.put(chatId, UpdateState.NONE);
            taskIdToUpdate.remove(chatId);
        }
    }

    public void startDeleteTask(long chatId) {
        List<Task> tasks = taskService.getUserTasks(chatId);
        if (tasks.isEmpty()) {
            sendMessage(chatId, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",MENU_MAIN);
            return;
        }

        sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n" + getAllTasksAsString(chatId), CallbackCommands.MENU_MAIN);
        userStates.put(chatId, UpdateState.WAITING_DELETE_ID);
    }

    private void handleTaskDelete(long chatId, String text) {
        try {
            long taskId = Long.parseLong(text);
            boolean deleted = taskService.deleteTask(chatId, taskId);

            if (deleted) {
                sendMessage(chatId, "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!",MENU_MAIN);
            } else {
                sendMessage(chatId, "–ó–∞–¥–∞—á–∞ —Å ID " + taskId + " –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", BACK_DELETE);
            }
        } catch (NumberFormatException e) {
            sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.",BACK_DELETE);
        } finally {
            userStates.put(chatId, UpdateState.NONE);
        }
    }

    public void startCreateTask(long chatId) {
        try {
            tempTaskDates.remove(chatId);
            userStates.put(chatId, UpdateState.WAITING_TASK_DATE);

            SendMessage message = new SendMessage();
            message.setChatId(String.valueOf(chatId));
            message.setText("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:MM");

            InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
            List<InlineKeyboardButton> row = new ArrayList<>();

            InlineKeyboardButton cancelButton = new InlineKeyboardButton();
            cancelButton.setText("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å");
            cancelButton.setCallbackData(CANCEL_CREATION);
            row.add(cancelButton);

            keyboard.add(row);
            markup.setKeyboard(keyboard);
            message.setReplyMarkup(markup);

            Message sentMessage = bot.execute(message);
            lastMessageIds.put(chatId, sentMessage.getMessageId());

        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: " + e.getMessage());
            sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", MENU_MAIN);
        }
    }

    private void handleTaskDateInput(long chatId, String text){
        try{
            LocalDateTime dateTime = customDateTimeFormatter.parse(text);
            if(dateTime.isBefore(LocalDateTime.now())){
                sendMessage(chatId,"–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:",CANCEL_CREATION);
                return;
            }
            tempTaskDates.put(chatId,dateTime);
            sendMessage(chatId,"–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:",CANCEL_CREATION);
            userStates.put(chatId,UpdateState.WAITING_DATE_DESCRIPTION);
        }catch (DateTimeParseException e) {
            sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:MM", CANCEL_CREATION);
        }
    }
    private void handleTaskDescriptionInput(long chatId, String text){
        if (text == null || text.trim().isEmpty()) {
            sendMessage(chatId, "–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:", CANCEL_CREATION);
            return;
        }

        LocalDateTime dateTime = tempTaskDates.get(chatId);
        if(dateTime == null){
            sendMessage(chatId,"–û—à–∏–±–∫–∞! –î–∞—Ç–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",MENU_MAIN);
            userStates.put(chatId,UpdateState.NONE);
            return;
        }

        Task task = taskService.createTask(chatId,dateTime,text);
        sendMessage(chatId,task.saveTaskEvent(),MENU_MAIN);
        tempTaskDates.remove(chatId);
        userStates.put(chatId,UpdateState.NONE);
    }
    public void cancelCreation(long chatId){
        tempTaskDates.remove(chatId);
        userStates.put(chatId,UpdateState.NONE);
        sendMessage(chatId,"–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ",MENU_MAIN);
    }
    private String getTaskCreationErrorMessage(IllegalArgumentException e) {
        return "–û—à–∏–±–∫–∞: " + e.getMessage() + "\n\n" +
                "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:\n" +
                "–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:MM –æ–ø–∏—Å–∞–Ω–∏–µ\n\n" +
                "–ü—Ä–∏–º–µ—Ä—ã:\n" +
                "31.12.2030 23:59 –í—Å—Ç—Ä–µ—á–∞ –ù–æ–≤–æ–≥–æ –ì–æ–¥–∞\n" +
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n" +
                "1. –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º\n" +
                "2. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:MM)\n" +
                "3. –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã\n";
    }

    private String getAllTasksAsString(long chatId) {
        List<Task> tasks = taskService.getUserTasks(chatId);
        StringBuilder sb = new StringBuilder();
        tasks.forEach(task -> sb.append(task.toString()).append("\n"));
        return sb.toString();
    }

    public void sendHelp(long chatId) {
        String helpText = """
            üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
            
            –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –º–µ–Ω—é:
            
            1. –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É - –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ —à–∞–≥–∞–º
            2. –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –≤–∞—à–∏—Ö –∑–∞–¥–∞—á
            3. –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏
            4. –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É - —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ ID
            
            –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
            """;

        sendMessage(chatId, helpText, MENU_MAIN);
    }

    public void sendMessage(long chatId, String text,String backCommand) {
        try {
            SendMessage message = new SendMessage();
            message.setChatId(String.valueOf(chatId));
            message.setText(text);

            if(backCommand!=null){
                InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
                List<List<InlineKeyboardButton>> keybord = new ArrayList<>();

                InlineKeyboardButton backButton = new InlineKeyboardButton();
                backButton.setText("‚¨Ö –ù–∞–∑–∞–¥");
                backButton.setCallbackData(backCommand);

                keybord.add(Collections.singletonList(backButton));
                markup.setKeyboard(keybord);
                message.setReplyMarkup(markup);
            }
            if(lastMessageIds.containsKey(chatId)){
                deleteMessage(chatId,lastMessageIds.get(chatId));
            }
            Message sendMessage = bot.execute(message);
            lastMessageIds.put(chatId,sendMessage.getMessageId());
        } catch (TelegramApiException e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: " + e.getMessage());
        }
    }
    public void sendMessage(long chatId, String text){
        sendMessage(chatId,text,null);
    }

    public void deleteMessage(long chatId, int messageId) {
        try {
            if (messageId <= 0) return;
            DeleteMessage deleteMessage = new DeleteMessage(String.valueOf(chatId), messageId);
            Boolean result = bot.execute(deleteMessage);
            if (result == null || !result) {
                System.err.println("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ " + messageId + " –≤ —á–∞—Ç–µ " + chatId);
            }
        } catch (TelegramApiException e) {
            if (!e.getMessage().contains("message to delete not found")) {
                System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: " + e.getMessage());
            }
        }
    }
}